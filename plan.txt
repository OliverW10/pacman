plan 1:
- create tree of each possible path pacman can take from current position N moves in the future
- each ghosts targets its nearest final node that isnt already being targetted
- somehow weight ghost targeting with how likely pacman is to take each path

plan 2:
- have evaluation function (recursive?)
- try all combinations of every possible path each ghost can take in N tiles



neural network (probrobly wont do):
- adversarial neural networks to train both pacman and ghosts
 option 1
  pacman input
   - all free squares have a pellet
   - wether each super pellet is there
   - all free squares have a ghost
   - all free squares have pacman
  ghosts input
   - all free squares have a pellet
   - wether each super pellet is there
   - all free squares have a ghost
   - all free squares have pacman
   - all free squares have us
 option 2
  pacman input
   - multiple grid views of the area around pacman that move with him for each of [walls, pellets, super pellets, ghosts]
 
 output:
  each direction to move, will choose highest confidence one that is avalible


Game instance, passed level map, pacman and ghost system
Mover base class that impliments movement through maze, calls get_direction( list of avalible directions )
sublcass mover to create pacman and ghosts
game calls step(dt, level_map, *any other) and draw(screen, x, y, w, h)
ghost system manages ghosts and facilitates planning between ghosts
